# Alterar o código para usar requests com cryptography para o carregamento do certificado e a autenticação com a chave privada.
import base64
import json
import requests
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from OpenSSL import crypto

def serpro_componentes_autenticacaoLoja():
    url = "endereco_endpoint_autenticacao"

     # Caminho do arquivo exportado em formato PFX ou P12
    caminho_arquivo = 'caminho_do_arquivo/'
    certificado = caminho_arquivo + 'certificado.pfx'
    senha = 'sEnha_do_certificado'

    # Credenciais da loja Serpro para autenticação
    consumer_key = "sua_customer_key"
    consumer_secret = "sua_customer_secret"

    # Converte as credenciais para base64
    def converter_base64(credenciais):
        return base64.b64encode(credenciais.encode("utf8")).decode("utf8")

    # Função para carregar o certificado PFX/P12 e extrair a chave privada e o certificado
    def carregar_certificado(certificado, senha):
        # Lê o arquivo PFX
        with open(certificado, 'rb') as f:
            pfx_data = f.read()

        # Carrega o certificado PFX usando OpenSSL
        pkcs12 = crypto.load_pkcs12(pfx_data, senha)

        # Extrai a chave privada e o certificado
        chave_privada = pkcs12.get_privatekey()
        certificado = pkcs12.get_certificate()

        return chave_privada, certificado

    # Autenticar na loja com o certificado digital do contratante
    def autenticar(ck, cs, certificado, senha):
        chave_privada, certificado = carregar_certificado(certificado, senha)

        # Cria os headers da requisição
        headers = {
            "Authorization": "Basic " + converter_base64(ck + ":" + cs),
            "role-type": "TERCEIROS",
            "content-type": "application/x-www-form-urlencoded"
        }

        body = {'grant_type': 'client_credentials'}

        # Faz a requisição POST com o certificado e chave privada
        response = requests.post(
            url,
            data=body,
            headers=headers,
            cert=(certificado, chave_privada)  # Passa o caminho para o certificado e chave privada
        )
        return response

    return autenticar(consumer_key, consumer_secret, certificado, senha)


response = serpro_componentes_autenticacaoLoja()

print(response.status_code)
print(json.dumps(json.loads(response.content.decode("utf-8")), indent=4, separators=(',', ': '), sort_keys=True))